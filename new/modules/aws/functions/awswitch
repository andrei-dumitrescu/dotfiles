#!/usr/bin/env sh

# This script provides utilities to switch between AWS profiles and to ensure
# the user is logged in to AWS. It checks for dependencies, lists profiles,
# switches profiles, and handles SSO login. This script should be sourced
# to modify the current shell's environment variables.

. "$LIBRARY_HOME/guard-is-sourced"
. "$LIBRARY_HOME/does-command-exist"

guard_is_sourced

# Verifies if the user is logged in to AWS.
_awswitch_is_user_logged_in() {
  if aws sts get-caller-identity >/dev/null 2>&1; then
    echo "AWS connection established."
    return 0
  else
    echo "Failed to establish AWS connection."
    return 1
  fi
}

# Log in to an AWS SSO profile.
_awswitch_login_as() {
  sso_url=$(aws-profile-utils get-property "$1" "sso_start_url")

  if [ -n "$sso_url" ]; then
    echo "SSO profile detected. Attempting to login..."
    aws sso login --profile "$1"

    # Check if the user is logged in after login attempt.
    _awswitch_is_user_logged_in 

    return 0
  else
    echo "No SSO session detected for profile '$1'."
    return 1
  fi
}

# Main function to switch AWS profiles or list available profiles.
awswitch() {
  does_command_exist aws aws-profile-utils

  # List available profiles if 'ls' is passed as the first argument.
  if [ "$1" = "ls" ]; then
    aws-profile-utils list
    return 0
  fi

  # Switch to the specified profile or to the 'default' if none is specified.
  profile="${1:-default}"
  if ! aws-profile-utils exists "$profile"; then
    echo "Error: Profile '$profile' not found in ~/.aws/credentials" >&2
    return 1
  fi

  # Export the AWS_PROFILE and AWS_REGION environment variables.
  export AWS_PROFILE="$profile"
  AWS_REGION=$(aws-profile-utils get-property "$profile" "region")
  export AWS_REGION

  echo "Switched to AWS profile: $profile"
  _awswitch_login_as "$profile" || return 1
}

