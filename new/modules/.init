#!/usr/bin/env dash
#
# ██████╗ ██████╗ ██████╗            ██╗  ██╗███╗   ███╗██╗   ██╗ ██████╗
# ██╔══██╗██╔══██╗██╔══██╗    ██╗    ██║  ██║████╗ ████║██║   ██║██╔════╝
# ██║  ██║██║  ██║██║  ██║  ██████╗  ███████║██╔████╔██║██║   ██║██║
# ██║  ██║██║  ██║██║  ██║  ╚═██╔═╝  ██╔══██║██║╚██╔╝██║╚██╗ ██╔╝██║
# ██████╔╝██████╔╝██████╔╝    ╚═╝    ██║  ██║██║ ╚═╝ ██║ ╚████╔╝ ╚██████╗
# ╚═════╝ ╚═════╝ ╚═════╝            ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═══╝   ╚═════╝
#            ██╗██████╗ 
# ██████╗   ██╔╝╚════██╗
# ╚═════╝  ██╔╝  █████╔╝
# ██████╗  ╚██╗  ╚═══██╗
# ╚═════╝   ╚██╗██████╔╝
#            ╚═╝╚═════╝ 
# NAME
#  DDD + HMVC style shell modules
#
# DESCRIPTION
#  An DDD (Domain Driven Design) and HMVC (Hierarchical Model View Controller)
#  style module system for organizing shell scripts, functions, variables, etc.
#
#  Each module is a self-contained unit, with its own directory, with minimal 
#  dependencies on other modules.
#  Modules have their own .init file as entry point to their functionality.
# 
#  Example structure:
#   @core/
#   aws/
#   i3/
#    config/
#    i3blocks/
#     toolbars/
#     layouts/
#    scripts/
#    widgets/
#    .init
#
#  Here, the i3 module contains everything related to i3. The config file,
#  layouts, toolbars, i3blocks widgets, etc. 
#
#  This is contrary to the default MVC (Model View Controller) way of
#  organizing, that Linux uses, where the config file is in
#  ~/.config/i3/config, the i3blocks config is in ~/.config/i3blocks/config,
#  the scripts are in ~/.local/i3-widgets, etc.
# 
# INSTALLATION
#  This file is meant to be sourced (it exports functions and variables) in the
#  shell's rc file (e.g. .zshrc).
#
#  source /path/to/modules/.init
#
# REQUIREMENTS
#   <.init>    Entry point file to the module's functionality. Automatically 
#              sourced by this file.
#
# RECOMMENDED FOLDER STRUCTURE
#   .env       File for private env data, such as API keys, passwords, etc.
#              Ignored by git.
#   .local/    Directory for temporary files and other data. Ignored by git.
#   .cache/    Directory for cache files. Ignored by git.
#   .tmp/      Directory for temporary files. Ignored by git.
#   scripts/   Directory for scripts. Use module .init to include in $PATH and
#              expose shell scripts to the outside world.
#   libs/      Directory for libraries. Keep reusable functions ment to be
#              imported in other scripts, for ex. a "die" function which
#              outputs to stderr and exits with a non-zero code.
#   functions/ Directory for functions. Use module .init to source and expose
#              to the outside world.
#   config/    Directory for config files.
#
# PRECEDENCE
#  Modules whose name starts with "@" are loaded first, in alphabetical order.
#  The rest of the modules are loaded after, also in alphabetical order.
#  This a very light weight way of defining module dependencies.
#
#  A common folder structure would be:
#   modules/
#     @core/
#     aws/
#     i3/
#     ssh/
#
#  The @core module is loaded first, then the rest of the modules, in 
#  alphabetical order.
#
#  While this will not give the granularity of a full blown dependency manager,
#  and allow you to specify if "nvm" depende on "ssh", it should strike a good
#  80/20 balance between simplicity and functionality.
#
# IGNORED
#  Modules whose name starts with "_" are ignored and not loaded. This is
#  useful when you want to temporarily disable a module without having to
#  delete it.

HMVC_HOME="$(dirname "$0")"
HMVC_DEBUG=true
HMVC_LOG="$HMVC_HOME/.logs/hmvc"

# ╭──────────────────────
# │ Before anything else, manualy load the @core module to benefit from the
# │ scripts and functions it provides in this file as well.
# ╰────────

printf "\x1b[1m%b\x1b[0m\n" "󰺔 Loading @core ..."
. "$HMVC_HOME/@core/.init"

# ╭──────────────────────
# │ Helper functions 
# ╰────────

# Find all defined modules. Modules whose name starts with "@" are loaded
# first, in alphabetical order, and then the remaining, also in alphabetical
# order.
detect_modules() {
  to_load_first=$(find "$HMVC_HOME"/@*/ -name ".init" -type f \
    | sort --ignore-case \
    | grep --invert-match "@core"
  ) 
  to_load_after=$(find "$HMVC_HOME"/*/ -name ".init" -type f \
    | grep --invert-match "@.*" \
    | sort --ignore-case \
    | grep --invert-match "_.*"
  )

  printf "%s\n%s\n" "$to_load_first" "$to_load_after"
}

# Calculate the duration in milliseconds between two nanoseconds timestamps
# Synopsis: calculate_duration <start_ns> <end_ns>
calculate_duration() {
  nano_to_ms "$(( $2 - $1 ))"
}

# Colorize the duration, passed in seconds, based on the time it took to load
# the module
# Synopsis: colorize_duration <duration_s>
colorize_duration() {
  is_warning=$(echo "$1 >= 100 && $1 <= 250" | bc)
  is_critical=$(echo "$1 > 250" | bc)
  label=$(printf "%dms" "$1")

  if [ "$is_warning" -eq 1 ]; then
    label=$(orange "$label")
  elif [ "$is_critical" -eq 1 ]; then
    label=$(red "$label")
  else
    label=$(green "$label")
  fi

  printf "%s" "$label"
}

# Load a module's .init file and measure the time it took
# Synopsis: load_module <module_init_file>
load_module() {
  init_file="$1"

  if [ "$HMVC_DEBUG" = true ]; then
    start_time_module=$(date +%s%N)
    name=$(basename "$(dirname "$init_file")")

    echo "$(bold "󰺔 Loading $name ...")"

    . "$init_file"
    end_time_module=$(date +%s%N)
    duration_ms=$(calculate_duration "$start_time_module" "$end_time_module")

    echo "  Finished in $(colorize_duration "$duration_ms")"
  else
    . "$init_file" > /dev/null 2>&1 
  fi
}

# ╭──────────────────────
# │ Main. Start here.
# ╰────────

start_time_main=$(date +%s%N)

if [ ! -d "$HMVC_LOG" ]; then
  mkdir -p "$(dirname "$HMVC_LOG")"
fi

init_files=$(detect_modules)
count=$(echo "$init_files" | wc -l)

echo "$init_files" | while IFS= read -r file; do
  load_module "$file"
done

end_time_main=$(date +%s%N)
duration_ms=$(calculate_duration "$start_time_main" "$end_time_main")

echo "╭───────────┤ Loaded $count modules"
echo "│  ┓ ┓ ┓ ╻ ┓       ━━ ┏┏┓"
echo "│ ┏┫┏┫┏┫━╋━┣┓┏┳┓┓┏┏━━━┫ ┫"
echo "│ ┗┻┗┻┗┻ ╹ ┛┗┛┗┗┗┛┗━━ ┗┗┛"
echo "╰──┤ $(colorize_duration "$duration_ms")"

