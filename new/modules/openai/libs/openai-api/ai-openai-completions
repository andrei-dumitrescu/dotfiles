#!/usr/bin/env dash

. "$CORE_FUNCTIONS/stdin-or"

# NAME
#  openai-api-completions - Call POST: /chat/completions 
#
# SYNOPSIS
#  openai-api-completions <-m|--model> <model> [-t|--temperature <value>] [--no-stream] <query>
#
# DESCRIPTION
#  Low-level script that sends a query to OpenAI's chat endpoint and returns 
#  the response.
#
#  See the OpenAI API reference for more details:
#  https://platform.openai.com/docs/api-reference/chat
#
# ARGUMENTS
#  <query>
#   The query to send to OpenAI
#
# OPTIONS
#  -m, --model <model>
#   The model to use for the completion.
#
#  -t, --temperature [value=0.7]
#   The temperature to use for the completion.
#
#  --no-stream
#   Disable streaming OpenAI's response. (default: true)
#
# ENVIRONMENT
#  OPENAI_API_KEY
#   The API key used for authenticating with the OpenAI API. 
# 
# EXAMPLES
#  openai-api-completions "What is the meaning of life?"
#  openai-api-completions -t 0.3 "What is the meaning of life?"
#  openai-api-completions -m davinci "What is the meaning of life?"
# 
# SEE ALSO
#  curl(1), jq(1)

# ╭───┤ Outside dependencies 
# ╰─
if [ -z "$OPENAI_API_KEY" ]; then
  echo "error: missing environment variable OPENAI_API_KEY." >&2
  exit 1
fi

# ╭───┤ Input and default values
# ╰─
should_stream=true
temperature=0.7

# ╭───┤ Input validation
# ╰─
while [ "$#" -gt 0 ]; do
  case $1 in
    --no-stream)
      should_stream=false
    ;;
    -m|--model)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        model=$2; shift
      else
        echo 'error: argument --model requires a value.' >&2
        exit 1
      fi
    ;;
    -t|--temperature)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        temperature=$2; shift
      else
        echo 'error: argument --temperature requires value.' >&2 
        exit 1
      fi
    ;;
    --) shift; break ;;
    -?*) echo "error: unknown flag: $1" >&2; exit 1 ;;
    *) break ;;
  esac
  shift
done

# Read after flags are parsed and shifted out of $@
query=$(stdin_or "$1")

if [ -z "$query" ]; then
  echo "error: missing question, pass it as first parameter or pipe to stdin" >&2
  exit 1 
fi

if [ -z "$model" ]; then
  echo "error: missing model, pass it as --model or -m" >&2
  exit 1 
fi

# ╭──────────────────────
# │ Main. Start here.
# ╰────────

if [ "$should_stream" = "true" ]; then
  curl_stream_flags="--no-buffer"
fi

jq --compact-output --null-input \
  --arg question "$query" \
  --arg model "$model" \
  --arg stream "$should_stream" \
  --arg temperature "$temperature" \
  '{
    model: $model,
    stream: ($stream | test("true")),
    messages: [{role: "user", content: $question}],
    temperature: ($temperature | tonumber)
  }' \
 | curl --silent "$curl_stream_flags" \
  --data @- \
  --fail-with-body \
  --request POST \
  --header "Content-Type: application/json" \
  --header "Authorization: Bearer $OPENAI_API_KEY" \
  --header "OpenAI-Organization: $OPENAI_ORG_ID" \
  https://api.openai.com/v1/chat/completions
