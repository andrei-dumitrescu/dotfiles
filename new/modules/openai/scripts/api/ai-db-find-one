#!/usr/bin/env sh

# NAME
#  ai-db-find-one - Find a single record for a given table
#
# SYNOPSIS
#  ai-db-find-one <-t table_name> <-w where_clause> [-f filter_clause]
#
# DESCRIPTION
#  Find a single record in a table by providing a sqlite WHERE clause. By default
#  all fields are included, but a filter can be provided to limit the fields
#  returned.
#
# OPTIONS
#  -w, --where <where_clause>
#   The WHERE clause to use when querying the database.
#
#  -t, --table <table_name>
#   The table to query.
#   
#  -f, --filter [filter_clause]
#   The filter clause to use when querying the database. Defaults to "*".
# 
# ERROR CODES
#  1 Input error: unknown flag provided, missing value for flag or missing
#    required flag
#  2 No items found in table with WHERE clause
#  3 More than one item found in table with WHERE clause
#
# ENVIRONMENT
#  OPENAI_DB_FILE
#   The SQLite database file.

filter="*"

# Parse flags
while [ "$#" -gt 0 ]; do
  case $1 in
    -f|--filter) 
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        filter=$2; shift
      else
        echo "error: argument $1 requires a value" >&2
        exit 1
      fi
    ;;
    -w|--where) 
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        where=$2; shift
      else
        echo "error: argument $1 requires a value" >&2
        exit 1
      fi
    ;;
    -t|--table) 
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        table=$2; shift
      else
        echo "error: argument $1 requires a value" >&2
        exit 1
      fi
    ;;
    --) shift; break ;;
    -?*) 
      echo "error: unknown flag $1" >&2
      exit 1
    ;;
    *) break ;;
  esac
  shift
done

# Input validation
if [ -z "$where" ]; then
  echo "error: missing required flag -w|--where" >&2
  exit 1
fi

if [ -z "$table" ]; then
  echo "error: missing required flag -t|--table" >&2
  exit 1
fi

# Main
data=$(sqlite3 --json "$OPENAI_DB_FILE" \
  "SELECT $filter FROM $table WHERE $where"
)

if [ -z "$data" ]; then
  echo "error: no item found in table $table with WHERE $where" >&2
  exit 2
fi

if [ "$(echo "$data" | jq 'length')" -gt 1 ]; then
  echo "error: more than one item found in table $table with WHERE $where" >&2
  echo "$data" | jq
  exit 3
fi

echo "$data" | jq --raw-output --compact-output --monochrome-output '.[0]'

