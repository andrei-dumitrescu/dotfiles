#!/usr/bin/env sh

. "$CORE_LIBS/stdin-or"

# NAME
#  ai-db-create - Create a new record in a given table
#
# SYNOPSIS
#  ai-db-create <-t|--table> <table_name> [json_data]
#
# DESCRIPTION
#  Inserts a new record into a specified table. The data for the new record
#  should be provided as a JSON string, or omitted to use default values.
#
# ARGUMENTS
#  [json_data]
#   The JSON data to insert into the table. The keys of the JSON object should
#   match the column names of the table. If omitted, the script attempts to insert a record
#   using the default values for the table columns.
#
# OPTIONS
#  -t, --table <table_name>
#   The table to insert the new record into.
#
# ERROR CODES
#  1 Input error: unknown flag provided, missing value for flag or missing
#    required flag
#  2 JSON parsing error
#
# ENVIRONMENT
#  OPENAI_DB_FILE
#   The SQLite database file.
#
# SEE ALSO
#  sqlite3(1), jq(1)

# Parse flags
while [ "$#" -gt 0 ]; do
  case $1 in
    -t|--table)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        table=$2; shift
      else
        echo "error: argument $1 requires a value" >&2
        exit 1
      fi
    ;;
    --) shift; break ;;
    -?*)
      echo "error: unknown flag $1" >&2
      exit 1
    ;;
    *) break ;;
  esac
  shift
done

# Input validation
if [ -z "$table" ]; then
  echo "error: missing required flag -t|--table" >&2
  exit 1
fi

# Main
json_data=$(stdin_or "$1")

if [ -z "$json_data" ] || [ "$json_data" = "{}" ]; then
  insert_statement="INSERT INTO $table DEFAULT VALUES;"
else
  insert_statement=$(echo "$json_data" \
    | jq --raw-output --arg table "$table" \
    "# Function to escape string for SQLite
    def sqlite_escape:
      if type == \"string\" then
        \"'\" + gsub(\"'\"; \"''\") + \"'\"
      else
        tostring
      end;

    # Extract keys and process values in a consistent order
    to_entries | 
      map(.key) as \$keys |
      map(.value | sqlite_escape) as \$values |

    # Build SQL insert statement
    \"INSERT INTO \(\$table) (\" +
      (\$keys | join(\", \")) +
    \") VALUES (\" +
      (\$values | join(\", \")) +
    \");\""
  )
  
  if [ $? -ne 0 ]; then
    echo "error: Invalid JSON input" >&2
    exit 2
  fi
fi

data=$(sqlite3 --json "$OPENAI_DB_FILE" <<EOF
BEGIN TRANSACTION;
  $insert_statement
  SELECT * from $table WHERE id = last_insert_rowid();
COMMIT;
EOF
)

echo "$data" | jq --raw-output --compact-output --monochrome-output '.[0]'
