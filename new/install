#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on fail in pipe

. ./install_utils

##
## Andrei's Artix Linux installation script. 
##

################################################
echo_bold "0. Confirm user"
################################################

USER=$(whoami)

if is_install_step_done "0_confirm_user"; then
  echo "Step already ran, skipping..." 
else
  echo "Install for user $(echo_bold "$USER"):"
  echo " - UID: $(id -u)"
  echo " - Home folder: $HOME"

  wait_for_any_key
  save_install_progress "0_confirm_user"
fi

################################################
echo_bold "1. Install core packages"
################################################

core_packages=(
  neofetch          # System information tool
  cmake             # Cross-platform open-source make system
  mesa              # Open source graphics drivers
  git               # Version control system
  fzf               # Fuzzy finder
  jq                # JSON processor
  unzip             # Zip file decompressor
  zathura           # PDF viewer
  zathura-pdf-mupdf # MuPDF plugin for Zathura
  zathura-pdf-ps    # PS plugin for Zathura
  nnn               # File manager
  networkmanager    # Network connection manager
  openssh           # SSH server and client
  # Faster cli tools re-written in Rust
  ytop              # System monitor
  bandwhich         # Network utilization
  tokei             # Code statistics
  exa               # Ls alternative
  fd                # Find alternative
  ripgrep           # Grep alternative
  bat               # Cat with syntax highlighting and Git integration
  tealdeer          # Client for tldr
  delta             # Git diff viewer
)

sudo pacman --noconfirm -S "${core_packages[@]}"

ln -v -f -s "$DOTFILES_HOME/new/.config/bat" "$HOME/.config/bat"
ln -v -f -s "$DOTFILES_HOME/new/.config/neofetch" "$HOME/.config/neofetch"
ln -v -f -s "$DOTFILES_HOME/new/home/.gitconfig" "$HOME/.gitconfig"
ln -v -f -s "$DOTFILES_HOME/new/home/doomguy.png" "$HOME/doomguy.png"
ln -v -f -s "$DOTFILES_HOME/new/home/doomguy-blood.png" "$HOME/doomguy-blood.png"

################################################
echo_bold "1.1 Add GitHub SSH key fingerprints"
################################################

# Public key fingerprints can be used to validate a connection to a 
# remote server. This makes sure that the server you are connecting to
# is the correct one and not a malicious server.
#
# Read more: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints

echo "github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl" > "$HOME/.ssh/known_hosts"
echo "github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=" >> "$HOME/.ssh/known_hosts"
echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=" >> "$HOME/.ssh/known_hosts"

echo_success

################################################
echo_bold "1.2 Create SSH key pair for GitHub"
################################################

GITHUB_SSH_KEY_PATH="$HOME/.ssh/$(whoami)@$(uname -n)_github"

if [ -f "$GITHUB_SSH_KEY_PATH" ]; then
  echo "SSH key pair already exists at $GITHUB_SSH_KEY_PATH, skipping..."
else 
  ssh-keygen -t ed25519 -f "$GITHUB_SSH_KEY_PATH" -q -N ""
fi

if [ -z "$SSH_AGENT_PID" ]; then
  echo "Starting ssh-agent..."
  eval "$(ssh-agent -s)"
else
  echo "ssh-agent is already running"
fi

# Add the SSH private key to the ssh-agent
ssh-add "$GITHUB_SSH_KEY_PATH"

echo_bold "Add the following SSH key to your GitHub account (https://github.com/settings/keys):"
cat "$GITHUB_SSH_KEY_PATH.pub"

wait_for_any_key

################################################
echo_bold "2. Install andreidmt/dotfiles repo"
################################################

DOTFILES_HOME="$HOME/Work/andreidmt/dotfiles"

if [ -d "$DOTFILES_HOME" ]; then
  echo "Dotfiles already cloned in $DOTFILES_HOME, pulling insted..."
  cd "$DOTFILES_HOME" && git pull && cd -
else 
  git clone https://github.com/andreidmt/dotfiles.git "$DOTFILES_HOME"
fi

echo_success

################################################
echo_bold "3. Create core directories"
################################################

mkdir -v -p "$HOME/Downloads"
mkdir -v -p "$HOME/Backups"
mkdir -v -p "$HOME/Mounts"
mkdir -v -p "$HOME/Zettelkasten"
mkdir -v -p "$HOME/Music"
mkdir -v -p "$HOME/Work/asd14"
mkdir -v -p "$HOME/Work/andreidmt"
mkdir -v -p "$HOME/Pictures/Screenshots"
ln -v -f -s "$DOTFILES_HOME/wallpapers" "$HOME/Pictures/Wallpapers"

# Folder bookmarks in file managers
ln -v -f -s "$DOTFILES_HOME/new/.config/gtk-3.0" "$HOME/.config/gtk-3.0"

echo_success

################################################
echo_bold "4. Install wayland, sway and friends"
################################################

wayland_packages=(
  wayland           # Wayland compositor infrastructure
  wl-clipboard      # Clipboard manager for Wayland
  sway              # i3-compatible Wayland compositor
  swayidle          # Idle management daemon for Wayland
  swaylock          # Screen locker for Wayland
  shotgun           # Screenshot utility for Wayland
  hacksaw           # Select Rectangle utility for Wayland
  slop              # Select Window utility for Wayland 
)

sudo pacman --noconfirm -S "${wayland_packages[@]}"

ln -v -f -s "$DOTFILES_HOME/new/.config/sway" "$HOME/.config/sway"
ln -v -f -s "$DOTFILES_HOME/new/.config/i3blocks" "$HOME/.config/i3blocks"

echo_success

################################################
echo_bold "5. Install terminal and fonts"
################################################

alacritty_packages=(
  alacritty               # GPU-accelerated terminal emulator
  fontconfig              # Font configuration and customization library
  ttf-liberation          # Fonts from the Liberation family
  gnu-free-fonts          # Free TrueType fonts from the Freefont project
  otf-hasklig-nerd        # Typeface fonts designed for
  ttf-hack-nerd           # source code augmented with ligatures and nerd icons
  ttf-jetbrains-mono-nerd # https://www.nerdfonts.com
  ttf-firacode-nerd       # 
)

sudo pacman --noconfirm -S "${alacritty_packages[@]}"

ln -v -f -s "$DOTFILES_HOME/new/.config/alacritty" "$HOME/.config/alacritty"
ln -v -f -s "$DOTFILES_HOME/new/.config/fontconfig" "$HOME/.config/fontconfig"

echo_success

################################################
echo_bold "5. Install ZSH"
################################################

zsh_packages=(
  zsh       # The Z shell
  starship  # The minimal, blazing-fast, and infinitely customizable prompt
)

sudo pacman --noconfirm -S "${zsh_packages[@]}"

ln -v -f -s "$DOTFILES_HOME/new/.config/zsh" "$HOME/.config/zsh"
ln -v -f -s "$DOTFILES_HOME/new/.config/.zshrc" "$HOME/.zshrc"

################################################
echo_bold "5.1 Set ZSH as default shell"
################################################

sudo chsh -s "$(which zsh)" "$USER"

wait_for_any_key "Ctrl+c to exit and restart your session to enter ZSH or press any key to continue..."

################################################
echo_bold "6. Install NVim"
################################################

nvim_packages=(
  neovim    # Vim-fork focused on extensibility and usability 
)

pacman --noconfirm -S "${nvim_packages[@]}"

################################################
echo_bold "6.1 Clone NvChad"
################################################

# Blazing fast Neovim config providing solid defaults and a beautiful UI, 
# enhancing your neovim experience. 

git clone https://github.com/NvChad/NvChad "$HOME/.config/nvim_nvchad" --depth 1
ln -v -f -s "$HOME/.config/nvim_nvchad" "$HOME/.config/nvim"

echo_success

