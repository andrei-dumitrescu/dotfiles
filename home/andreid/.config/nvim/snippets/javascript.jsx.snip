snippet lintdisable 
   /* eslint-disable ${1} */

snippet jsdoc-typedef
  /** 
   * @typedef {${1}} ${2} 
   */

snippet jsdoc-type
  /** @type {${1}} ${2} */

snippet plugin
  /**
   * @typedef {Object} ${1}Plugin
   */

  module.exports = {
    /**
     * Used by other plugins to request it's content
     *
     * @type {string}
     */
    name: "$1",

    /**
     * List of plugin names who's content we're dependent on. Dependent plugins
     * are evaluated first.
     *
     * @type {string[]}
     */
    depend: [],

    /**
     * Plugin factory function. Will run once and it's content cached by the
     * @asd14/pluginus dependency injector.
     *
     * @returns {Object}
     */
    create: () => {

      return {
      }
    },
  }

snippet model
  const { pick } = require("@asd14/m")

  /**
   * Document type of \`$1\` collection
   *
   * @typedef {Object} ${1:model name}Instance
   *
   * @property {string}   id
   * @property {number}   createdAt
   * @property {number}   updatedAt
   */

  module.exports = {
    name: "$1Model",

    depend: ["Firebase"],

    create: ({ Firestore }) => {
      const modelCollection = Firestore.collection("$1")

      return {
        /**
         * Create one
         *
         * @param {$1Instance} data Data of new resource
         *
         * @return {Promise<{id: string}>}
         */
        createOne: data =>
          modelCollection
            .add({
              ...data,
              createdAt: new Date().toISOString(),
            })
            .then(snapshot => ({
              id: snapshot.id,
            })),

        /**
         * Retrieve one
         *
         * @param {string}   id               Resource id
         * @param {Object}   [props={}]       Named parameters
         * @param {string[]} [props.pluck=[]] Only return specific fields
         *
         * @return {Promise<$1Instance|undefined>}
         */
        readOne: (id, { pluck = [] } = {}) =>
          modelCollection
            .doc(id)
            .get()
            .then(doc =>
              doc.exists
                ? {
                    id: doc.id,
                    ...pick(pluck, doc.data()),
                  }
                : undefined
            ),

        /**
         * Retrieve multiple
         *
         * @param {Object}   [props={}]       Named parameters
         * @param {number}   [props.limit=10] How many items to return
         * @param {number}   [props.offset=0] Start selecting from position
         * @param {string[]} [props.pluck=[]] Only return specific fields
         *
         * @return {Promise<$1Instance[]>}
         */
        readAll: ({ limit = 10, offset = 0, pluck = [] } = {}) =>
          modelCollection
            .orderBy("createdAt", "desc")
            .offset(offset)
            .limit(limit)
            .get()
            .then(snapshot => {
              /** @type {$1Instance[]} */
              const result = []

              // TODO: Find a way to _retrieve_ partial data from the database,
              // not filter it out on the server
              snapshot.forEach(doc => {
                result.push({
                  id: doc.id,
                  ...pick(pluck, doc.data()),
                })
              })

              return result
            }),

        /**
         * Update one
         *
         * @param {string}        id   Resource id
         * @param {$1Instance} data Resource data to update
         *
         * @return {Promise<{id: number}|undefined>}
         */
        updateOne: (id, data) => {
          const doc = modelCollection.doc(id)

          return doc
            .get()
            .then(snapshot =>
              snapshot.exists
                ? doc.update(data).then(() => ({ id, asd: 2 }))
                : undefined
            )
        },

        /**
         * Delete one
         *
         * @param {String} id Resource id
         *
         * @return {Promise<{id: number}|undefined>}
         */
        deleteOne: id => {
          const doc = modelCollection.doc(id)

          return doc
            .get()
            .then(snapshot =>
              snapshot.exists ? doc.delete().then(() => ({ id })) : undefined
            )
        },
      }
    },
  }

snippet curried
  export const ${1} = (...params) => {
    // @signature (${2}) => (source)
    if (params.length <= 1) {
      return source => _$1(params[0], source)
    }

    // @signature ($2, source)
    return _$1(...params)
  }

snippet hook-keyboard
  // keyboard shortcuts
  const { addShortcuts, removeShortcuts } = useKeyboard("${1}")

  useEffect(() => {
    addShortcuts({
      "key": () => {},
    })

    return () => removeShortcuts()
  }, [addShortcuts, removeShortcuts])

snippet hook-cli
  // command line
  useEffect(() => {
    addCommands({
      layer: "${1}",
      commands: [
        {
          name: "do-something",
          description: "Lorem",
          weight: 1,
          params: [{ name: "email", isRequired: true }],
          onFinish: () => {}, 
        },
      ],
    })

    return () => removeCommands({ layer: "$1" })
  }, [])

snippet m 
  import {${1}} from "@asd14/m"

snippet mr 
  const {${1}} = require("@asd14/m")

snippet cx
  import cx from "classnames"

snippet pt
  import PropTypes from "prop-types"

snippet list
  const debug = require("debug")("${1}:${2}")
  
  import { buildList } from "@asd14/state-list"

  // import { GET, POST } from "@asd14/fetch-browser"

  export const $2 = buildList({
    name: "${3}",

    create: data => data,
    
    read: () => [{ id: 1, title: "lorem ipsum" }],
    
    update: (id, data) => ({ id, ...data }),
    
    remove: id => ({ id }),
  })

snippet react-container
  const debug = require("debug")("${1}:${2}Container")

  import React, { useEffect } from "react"
  import PropTypes from "prop-types"

  import { useList } from "@asd14/react-hooks"

  import { $2List } from "./$2.list"
  import { $2UI } from "./$2.ui"

  const $2Container = ({ productId }) => {
    const {
      selector: { items },
      read,
    } = useList($2List)

    useEffect(() => {
      read({ productId })
    }, [productId, read])

    return (
      <$2UI productId={productId} items={items()} />
    )
  }

  $2Container.propTypes = {
    productId: PropTypes.string.isRequired,
  }

  $2Container.defaultProps = {
  }

  export { $2Container }

snippet react-ui
  const debug = require("debug")("${1}:${2}")

  import React from "react"
  import cx from "classnames"
  import PropTypes from "prop-types"
  import { is } from "@asd14/m"

  import { deepReactMemo } from "@asd14/react-hooks"

  import css from "./$2.module.css"

  const $2 = ({ className, id }) => {
    return (
      <div className={cx({
        [className]: is(className)
      })}>
      {id}
      </div>
    )
  }

  $2.propTypes = {
    className: PropTypes.string,
    id: PropTypes.string.isRequired,
  }

  $2.defaultProps = {
    className: null,
  }
  
  const memo = deepReactMemo($2)

  export { memo as $2 }

snippet test-js
  import { describe } from "riteway"

  import { ${1} } from "./${2}"

  describe("$1", async assert => {
    assert({
      given: "some-context",
      should: "some-outcome",
      actual: $1(),
      expected: 42,
    })
  })

snippet test-react
  import React from "react"
  import render from "riteway/render-component"
  import { describe } from "riteway"

  import { ${1} } from "./${2}"

  describe("$1", async assert => {
    {
      const $ = render(<$1 />)

      assert({
        given: "no props",
        should: "render something",
        actual: $("[data-test-id]").length,
        expected: 1,
      })
    }
  })

snippet test-react-case
  {
    const $ = render(<${1} />)

    assert({
      given: "props",
      should: "render something",
      actual: $("[data-test-id]").length,
      expected: 1,
    })
  }

snippet memo
  const memo = React.memo(${1}, (prev, next) => {
    const changingProps = [${2}]

    return deepEqual(pick(changingProps)(prev))(pick(changingProps)(next))
  })

snippet schema
  /**
   * foo: {
   *   type: "string",
   *   pattern: "^[a-z0-9-]+$",
   *   maxLength: 25,
   *   minLength: 25,
   * },
   *
   * limit: {
   *   type: "integer",
   *   minimum: 1,
   *   maximum: 100,
   *   default: 20,
   * },
   *
   * bar: {
   *   type: "string",
   *   enum: ["lorem", "dolor", "bobby"],
   * },
   *
   * ipsum: {
   *   type: ["integer", "null"],
   *   enum: ["lorem", "dolor", "bobby"],
   * },
   *
   * id: {
   *   oneOf: [
   *     { type: "integer" },
   *     {
   *       type: "array",
   *       items: { type: "integer" },
   *       minItems: 1,
   *       uniqueItems: true,
   *     },
   *   ],
   * },
   */

  module.exports = {
    headers: {
      type: "object",
      required: ["x-content-type", "authorization"],
      properties: {
        "x-content-type": {
          enum: ["application/json"],
        },
        authorization: {
          type: "string",
        },
      },
    },

    params: {
      type: "object",
      additionalProperties: false,
    },

    query: {
      type: "object",
      additionalProperties: false,
    },

    body: {
      type: "object",
      additionalProperties: false,
    },
  }

snippet n404
  if (isEmpty(users)) {
    throw new ApplicationError("${1} not found", {
      status: 404,
      fieldErrors: [
        {
          dataPath: "body.${2}",
          message: "$1 not found",
        },
      ],
    })
  }

snippet isAllowed
  /**
   * Permission checking, if allowed:
   *  -> continue to action
   *  -> otherwise return 403
   *
   * @param  {Object}  plugins  Plugins
   * @param  {Object}  req      Node request
   *
   * @return {boolean}
   */
  isAllowed: ({ Models: { JWT } }) => ({
    ctx: {
      jwt: { jti, userId },
    },
  }) => {
    const checks = [
      // cross check outisice jwt signed data with db info
      () => JWT.isValid(jti, { issuedBy: userId }),

      // context related permission checks
    ]

    return sequenceWhile(isTrue, checks).then(all(equals(true)))
  },

snippet route
  /**
   * @typedef { import("../users.model").UsersPlugin} UsersPlugin
   */

  const debug = require("debug")("mutant:${1}Route")
  const { NotFoundError } = require("@asd14/blocks")
  const { is } = require("@asd14/m")

  /**
   * 
   *
   * @api        {DELETE} /$3
   * @permission {NONE}
   *
   * @throws {NotFoundError} 
   *
   * @returns {Promise<{}>}
   *
   * @example
   */
  module.exports = {
    method: "${2}",
    path: "/${3}",

    /**
     * Check "req.query", "req.header", "req.params" and "req.body"
     * against a JSON Schema. If check fails, respond with 409,
     * otherwise continue to ".authenticate".
     */
    schema: require("./${4}.schema"),

    /**
     * Check for valid JWT.
     *
     * @param {Object} plugins Application plugins
     *
     * @returns {function(Object): boolean | Promise<boolean>}
     * If false, responds with 401, otherwise continue to ".authorize".
     */
    authenticate: () => ({ ctx: { jwt } }) => is(jwt.userId),

    /**
     * Check if is allowed to access underlying resource.
     *
     * @param {Object}            plugins             Application plugins
     * @param {PermissionsPlugin} plugins.Permissions Permissions model
     * @param {UsersPlugin}       plugins.Users       Users model
     *
     * @returns {function(Object): (boolean | Promise<boolean>)}
     * If false, respond with 403, otherwise continue to ".action".
     */
    authorize: () => () => true,

    /**
     * Route/Controller logic
     *
     * @param {Object}            plugins             Application plugins
     *
     * @returns {function(Object): Promise<*>} 500 if throws, 201 if POST, 200 otherwise
     */
    action: (/* plugins */) => (/* req */) => {
    }
  }

snippet model
  const debug = require("debug")("mutant:${1}Model")

  // import r from "rethinkdb"

  module.exports = {
    table: "$1",

    /**
     * Check if $1 exists by id
     *
     * @param {Object} table ReQL table
     * @param {Object} conn  ReDB connection
     * @param {String} id    Component id
     *
     * @returns {Promise<boolean>}
     */
    exists: (table, conn) => id =>
      table("id")
        .count(id)
        .run(conn)
        .then(count => count !== 0),

    /**
     * Fetch all $1
     *
     * @param {Object}   table      ReQL table
     * @param {Object}   conn       ReDB connection
     * @param {Object}   opt.filter Field conditions
     * @param {String[]} opt.pluck  Only return specific fields
     * @param {Number}   opt.limit  How many to return
     * @param {Number}   opt.offset Start selecting from position
     *
     * @returns {Promise<Object[]>}
     */
    readAll: (table, conn) => ({ filter = {}, pluck = [], limit, offset } = {}) =>
      table
        .filter(filter)
        .pluck("id", ...pluck)
        .limit(limit)
        .skip(offset)
        .coerceTo("array")
        .run(conn),
  }

snippet migration 
  import r from "rethinkdb"

  /**
   * 
   *
   * - Can run multiple times without side-effects: YES/NO
   * - Can reverse without side-effects: YES/NO
   */
  module.exports = {
    // If set, the migration will not run unless table exists
    // table: "",

    // Queries returned by methods are sequential
    up: () => [],

    down: () => [],
  }
