#!/usr/bin/env dash

. "$CORE_FUNCTIONS/stdin-or"

# NAME
#  jot - Quickly write text in Neovim and echo it to the terminal.
#
# SYNOPSIS
#  jot [-c|--continue]
#  jot [-h|--help]
#
# DESCRIPTION
#  Create a note using a text editor. Think of it as an extended echo command.
#
# OPTIONS
#  -c, --continue
#   Continue editing the last note.
#
#  -h, --help
#   Display this help message.
#
# EXAMPLES
#  jot | wc -c 
#   Count the number of characters in the text entered in jot.
#
#  jot > ~/Notes/draft/$(date +%Y-%m-%d-%H-%M-%S).md
#   Save the note to a file with a timestamp in the filename.
#
#  cat some-other-note.md | jot | wc -c
#   Start jot with the content of a file and count the number of characters in
#   the final text.
#
# SEE ALSO
#  nvim(1), alacritty(1), wc(1)

CMD_NAME="jot"

# ╭───┤ Pre-flight checks
# ╰─

if ! command -v alacritty >/dev/null; then
  print-error "alacritty is not installed, exiting" "$CMD_NAME"
  exit 1
fi

if ! command -v nvim >/dev/null; then
  print-error "nvim is not installed, exiting" "$CMD_NAME"
  exit 1
fi

if [ ! -d "${HOME}/.jot" ]; then
  mkdir "${HOME}/.jot"
fi

# ╭───┤ Argument parsing and validation
# ╰─

PREV_NOTE_PATH="${HOME}/.jot/last_note_path"
SHOULD_CONTINUE=false

while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      man --pager cat "$(dirname "$0")/jot.1"
      exit 0
    ;;
    -c|--continue)
      SHOULD_CONTINUE=true
      shift
    ;;
    --) shift; break ;;
    -?*) print-error "unknown flag: $1" "$CMD_NAME"; exit 1 ;;
    *) break ;;
  esac
done

# ╭──────────────────────
# │ Main. Start here.
# ╰────────

# Decide on the tmp file to edit.
# Either the last one, from a previous jot, or create a new one.
if [ "$SHOULD_CONTINUE" = true ] && [ -f "$PREV_NOTE_PATH" ]; then
  TMP_FILE=$(cat "$PREV_NOTE_PATH" 2>/dev/null)
fi

if [ -z "$TMP_FILE" ]; then
  TMP_FILE=$(mktemp /tmp/jot.XXXXXX)

  if [ -z "$TMP_FILE" ]; then
    print-error "could not create temporary file, exiting" "$CMD_NAME"
    exit 1
  fi
fi

# Add stdin content to the temporary file. 
# This is usefull when the user pipes contents of a file or another command
# into jot.
#
# EXAMPLE:
#  cat some-function.js | jot "explain the following function:" | ai
input=$(stdin_or "")
if [ -n "$input" ]; then
  printf "\n\`\`\`%s\n\`\`\`" "$input" >> "$TMP_FILE"
fi

# Open the file in Neovim inside an Alacritty terminal. 
# This is the main interaction point with the user.
alacritty --title "$TMP_FILE - jot" \
  --class "center-float" \
  --command nvim \
    -c "setlocal syntax=markdown" \
    -c "setlocal wrap" \
    -c "setlocal spell" \
    -c "startinsert" \
    "$TMP_FILE"

# Persist the note, after being edited by the user, for future use if user
# wants to continue editing it, and output the note to the terminal.
text=$(cat "$TMP_FILE")
if [ -n "$text" ]; then
  printf "%s" "$text"
  echo "$TMP_FILE" > "$PREV_NOTE_PATH"
else
  echo "error: no text was entered" >&2
  exit 1
fi
