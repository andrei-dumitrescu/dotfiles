#!/usr/bin/bash -e

SCRIPT_NAME=$(basename "$0")

print_help() {
  echo "NAME"
  echo "  $SCRIPT_NAME"
  echo ""
  echo "SYNOPSIS"
  echo "  $SCRIPT_NAME <command> [options] [targets]"
  echo ""
  echo "DESCRIPTION"
  echo "  Wrapper with common action over pacman and aur" 
  echo ""
  echo "COMMANDS"
  echo "  help"
  echo "    Print this help and exit"
  echo ""
  echo "  list [options]"
  echo "    List installed packages"
  echo "    OPTIONS"
  echo "      -s, --source =pacman|aur|manual"
  echo "        List packages installed from pacman, aur or manualy"
  echo "      -u, --show-only-updates"
  echo "        List only packages with available updates"
  echo ""
  echo "  install [options] pkg-name"
  echo "    Download and install package"
  echo "    OPTIONS"
  echo "      -s, --source =pacman|aur"
  echo "        Install package from pacman or aur"
  echo ""
  echo "  search [options] pkg-name"
  echo "    Search for package"
  echo "    OPTIONS"
  echo "    -s, --source =pacman|aur"
  echo ""
  echo "  remove_orphans"
  echo "    Remove orphaned packages"
  echo ""
}

# Remove listed packages from all local repositories
remove_packages() {
  source="pacman"

  while :; do
    case "$1" in
      -s|--source) source="$2"; shift;;

      # Convention is to use -- to end options parsing
      --) shift; break ;;
      -?*) echo "WARN: Unknown option (ignored): $1" >&2 ;;

      # Nothing matches, break out of the while loop
      *) break ;;
    esac
    shift
  done

  case "$source" in
    pacman) 
      echo "# sudo pacman -R \"$1\""
      sudo pacman -R "$1"
    ;;
    aur) 
      aur repo --list-path | while read -r repo_path; do
        echo "# repo-remove \"$repo_path\" \"$1\""
        repo-remove "$repo_path" "$1"
      done
    ;;
    manual) result=$(pacman -Qm) ;;
  esac
}

# list(...options)
list() {
  source="pacman"
  while :; do
    case "$1" in
      -s|--source) source="$2"; shift;;
      -u|--show-only-updates) shouldShowUpdates="true" ;;
      --) shift; break ;;
      -?*) echo "WARN: Unknown option (ignored): $1" >&2 ;;
      *) break ;;
    esac
    shift
  done

  cowsay "Listing installed packages from \"$source\" ..."

  case "$source" in
    pacman) result="$(pacman -Q)" ;;
    aur) 
      result=$(aur repo --list) 

      if [ "$shouldShowUpdates" ]; then
        result=$(echo "$result" | aur vercmp)
      fi
    ;;
    manual) result=$(pacman -Qm) ;;
  esac


  if [ "$result" ]; then
    echo "$result" | column --table
  else
    echo "No packages found"
  fi
}

# install(...options, package)
install() {
  source="pacman"
  while :; do
    case "$1" in
      -s|--source) source="$2"; shift;;
      --) shift; break ;;
      -?*) echo "WARN: Unknown option (ignored): $1" >&2 ;;
      *) break ;;
    esac
    shift
  done

  cowsay "Installing \"$*\" from \"$source\" ..."

  case "$source" in
    pacman) sudo pacman -S "$@" ;;
    aur) 
      aur sync "$1" 
      sudo pacman -S "$1"
    ;;
    *) 
      echo "ERROR: Unknown source $1" >&2
      exit 1
    ;;
  esac
}

remove_orphans() {
  cowsay "Removing orphaned packages ..."

  orphanPackages=$(pacman -Qtdq | tr "\n" " ")
  if [ -n "$orphanPackages" ]; then 
    sudo pacman -Rns $orphanPackages
    doomst \
      "$SCRIPT_NAME" \
      "Removed $(echo "$orphanPackages" | wc -w) orphan packages"
  else
    doomst "$SCRIPT_NAME" "No orphan packages found"
  fi

  sudo pacman -Sc
  doomst \
    "$SCRIPT_NAME" \
    "After cache cleaup with \`pacman -Sc\`\n\n$(du -h /var/cache/pacman/pkg)"
}

search() {
  source="pacman"
  while :; do
    case "$1" in
      -s|--source) source="$2"; shift;;
      --) shift; break ;;
      -?*) echo "WARN: Unknown option (ignored): $1" >&2 ;;
      *) break ;;
    esac
    shift
  done

  cowsay "Searching for packages matching \"$1\" in \"$source\" ..."

  case "$source" in
    pacman) pacman -Ss "$1" ;;
    aur) aur pkglist "$1";;
  esac
}

details() {
  pacman -Qil -p "$1"
}

case "$1" in
  help) print_help ;;
  list) list "${@:2}" ;;
  info|details) details "${@:2}" ;;
  install) install "${@:2}" ;;
  remove) remove_packages "${@:2}" ;;
  search) search "${@:2}" ;;
  remove_orphans) remove_orphans "${@:2}" ;;
  *) 
    print_help
    echo "ERROR: Command \"$1\" not recognized" >&2
    exit 1
  ;;
esac

