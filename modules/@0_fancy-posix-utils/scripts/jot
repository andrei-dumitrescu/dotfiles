#!/usr/bin/env dash

# shellcheck source=../../functions/stdin-or
. "$FCLI_FUNCTIONS/stdin-or"

# shellcheck source=../../functions/predicates
. "$FCLI_FUNCTIONS/predicates"

# NAME
#  jot - Quickly write text in Neovim and echo it to the terminal.
#
# SYNOPSIS
#  jot [-c|--continue]
#  jot [-h|--help]
#
# DESCRIPTION
#  Create a note using a text editor. Think of it as an extended echo command.
#
# OPTIONS
#  -c, --continue
#   Continue editing the last note.
#
#  -h, --help
#   Display this help message.
#
# EXAMPLES
#  jot | wc -c 
#   Count the number of characters in the text entered in jot.
#
#  jot > ~/Notes/draft/$(date +%Y-%m-%d-%H-%M-%S).md
#   Save the note to a file with a timestamp in the filename.
#
#  cat some-other-note.md | jot | wc -c
#   Start jot with the content of a file and count the number of characters in
#   the final text.
#
# EXIT CODES
#  1 - Missing Operating System dependency
#  2 - Missing/invalid argument
#
# SEE ALSO
#  nvim(1), alacritty(1), log(1)

export LOG_NAMESPACE="jot"
export LOG_LEVEL="info"

if ! does_command_exist alacritty; then
  fancy-log error "alacritty is not installed, exiting"
  exit 1
fi

if ! does_command_exist nvim; then
  fancy-log error "nvim is not installed, exiting"
  exit 1
fi

# ╭───┤ Globals
# ╰─

JOT_HOME="${HOME}/.jot"
SHOULD_CONTINUE=false
PREV_NOTE_PATH="${JOT_HOME}/last_note_path"
TMP_FILE=""

if [ ! -d "$JOT_HOME" ]; then
  mkdir "$JOT_HOME" > /dev/null 2>&1
fi

# ╭───┤ Functions
# ╰─

# Parse command-line options and set global variables.
parse_options() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h|--help)
        man --pager cat "$(dirname "$0")/jot.1"
        exit 0
        ;;
      -c|--continue)
        SHOULD_CONTINUE=true
        shift
        ;;
      --) shift; break ;;
      -?*) fancy-log error "unknown flag: $1"; exit 1 ;;
      *) break ;;
    esac
  done
}

# Decide the temporary file path to store content in.
decide_tmp_file() {
  if [ "$SHOULD_CONTINUE" = true ] && [ -f "$PREV_NOTE_PATH" ]; then
    TMP_FILE=$(cat "$PREV_NOTE_PATH" 2>/dev/null)
  fi

  if [ -z "$TMP_FILE" ]; then
    TMP_FILE=$(mktemp /tmp/jot.XXXXXX)

    if [ -z "$TMP_FILE" ]; then
      fancy-log error "could not create temporary file, exiting"
      exit 1
    fi
  fi
}

# Add stdin content to the temporary file. 
# This is usefull when the user pipes contents of a file or another command
# into jot.
#
# EXAMPLE:
#  cat some-function.js | jot "explain the following function:" | ai
add_stdin_to_file() {
  input=$(stdin_or "")
  if [ -n "$input" ]; then
    printf "%s" "$input" >> "$TMP_FILE"
  fi
}

# Open the file in Neovim inside an Alacritty terminal. 
# This is the main interaction point with the user.
edit_note() {
  alacritty --title "$TMP_FILE - jot" \
    --class "center-float" \
    --command nvim \
      -c "setlocal syntax=markdown" \
      -c "setlocal wrap" \
      -c "setlocal spell" \
      "$TMP_FILE"
}

# Persist the note, after being edited by the user, for future use if user
# wants to continue editing it, and output the note to the terminal.
persist_and_output_note() {
  text=$(cat "$TMP_FILE")

  if [ -n "$text" ]; then
    printf "%s" "$text"
    echo "$TMP_FILE" > "$PREV_NOTE_PATH"
  else
    fancy-log info -v exit_code 0 "No text entered, nothing to do"
    exit 0
  fi
}

# ╭──────────────────────
# │ Main. Start here.
# ╰────────

# Begining
parse_options "$@"
decide_tmp_file

# Middle
add_stdin_to_file
edit_note

# End
persist_and_output_note

