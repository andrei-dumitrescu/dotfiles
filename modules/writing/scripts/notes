#!/usr/bin/env sh

. "$FCLI_FUNCTIONS/stdin-or"

export LOG_NAMESPACE="󱅄 writing"
export LOG_LEVEL=info

create() {
  draftsPath="$NOTES_DATA/draft"
  path="$draftsPath/$(date +%y-%j).md"

  mkdir -p "$draftsPath"

  if [ ! -f "$path" ]; then
    {
      snippets run "frontmatter_template-toml draft"
      echo ""
      echo "# $(snippets run "date nice")"
    } > "$path"
  fi

  printf "\n## %s\n" "$(date '+%H:%M')" >> "$path"
  cd "$NOTES_DATA"
  nvim -c "norm G" -c "norm zz" -c "set spell" "$path"
}

open() {
  notePath=$(readStdinOr "$1")

  if [ -f "$notePath" ]; then
    cd "$NOTES_DATA"
    nvim -c "norm zz" -c "set spell" "$notePath"
  else
    fancy-log error -v path "$notePath" "Note does not exist"
    exit 2
  fi
}

list() {
  notes=$(rg --files --sortr modified "$NOTES_DATA" \
    | rg .md \
  )

  for path in $notes
  do
    title=$(rg "^# " --max-count 1 "$path" | sed -e "s/# //g")
    type=$(sed --quite '/^```toml/,/^```/p' < "$path" \
      | grep --ignore-case "type" \
      | awk --field-separator '[ ="]+' '{ print tolower($2) }'
    )
    relativePath=$(echo "$path" | sed -e "s|$NOTES_DATA/||g")

    if [ -z "$type" ]; then
      printf "%s\n<small>%s</small>|" "${title:-'--'}" "$relativePath"
    else
      printf "[%s] %s\n<small>%s</small>|" "$type" "${title:-'--'}" "$relativePath"
    fi
  done
}

ask() {
  note=$(notes list \
    | rofi -dmenu \
      -eh 2 \
      -sep '|' \
      -p " :" \
      -i \
      -markup-rows \
      -case-sensitive false \
  )

  if [ -n "$note" ]; then
    echo "$note" \
      | sanitize html \
      | tail -n 1 \
      | xargs "$TERMINAL" -t such-important -e notes open
  fi
}

case "${1-ask}" in
  ask) ask ;;
  create) create ;;
	list) list ;;
	open) open "$2" ;;
  *) 
    fancy-log error \
      -v cmd "$1" \
      -v available_commands "ask,create,list,open" \
      "Command not found"
    exit 1 
  ;;
esac
