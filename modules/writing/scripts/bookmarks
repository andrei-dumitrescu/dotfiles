#!/usr/bin/env sh

. "$FCLI_FUNCTIONS/stdin-or"

export LOG_NAMESPACE="󱅄 writing"
export LOG_LEVEL=info

# NAME
#  bookmarks - Manage bookmarks
#
# SYNOPSIS
#  bookmarks [COMMAND]
#
# DESCRIPTION
#  Bookmarks are individual .toml files stored in $BOOKMARKS_DATA.
#  This script provides a CRUD interface for managing bookmarks.
#
# COMMANDS
# list
#  List all bookmarks
# open
#  Open a bookmark in the default browser
# upsert
#  Create or edit a bookmark
#
# SEE ALSO

get_toml_field() {
  input=$(stdin_or "$1")

  if [ -p /dev/stdin ]; then
    field_name="$1"
  else
    field_name="$2"
  fi

  echo "$input" \
    | grep "^$field_name=" \
    | awk -F '=' '{ print $2 }' \
    | sed 's/^"//g' \
    | sed 's/"$//g'
}

list() {
  for file in "$BOOKMARKS_DATA"/*.toml
  do
    content="$(cat "$file")"
    title="$(get_toml_field "$content" "title")"
    author="$(get_toml_field "$content" "author")"

    echo "$author - $title"
  done
}

# Open Nvim with the bookmark file. If the file does not exist, create it 
# applying a template.
open_or_create() {
  path="$1"

  if [ ! -f "$path" ]; then
    path="$BOOKMARKS_DATA/$path.toml"

    {
      echo "id=\"$(random uuid)\""
      echo "url=\"\""
      echo "title=\"\""
      echo "author=\"\""
      echo "tags=[\"linux\"]"
      echo "type=\"article|library|video|documentation\""
      echo "created_at=\"$(date --iso-8601=seconds)\""
      echo ""
    } > "$path"
  fi

  # Set nvim's NerdTree file explorer to the snippets directory
  cd "$BOOKMARKS_DATA"

  nvim \
    -c "norm zz" \
    -c "set spell" \
    -c "set syntax=markdown" \
    "$path"
}

# Choose a bookmark from the list of all bookmarks. If no bookmark is found 
# for the user's query, return the query.
choose_bookmark() {
  title="$1"
  delimiter_count=$(echo "$BOOKMARKS_DATA" \
    | grep --only-matching "/" \
    | wc --lines
  ) 
  all_bookmarks=$(rg --files --glob '**/*' \
    --sortr modified \
    "$BOOKMARKS_DATA"
  )
  choice=$(echo "$all_bookmarks" \
    | fzf \
      --preview 'bat --color=always --style=numbers --line-range :500 {}' \
      --preview-window=right:85:wrap \
      --header "$title" \
      --delimiter "/" \
      --with-nth=$(( delimiter_count + 2 )) \
      --print-query
    )
  query=$(echo "$choice" | head -n 1)
  bookmark_path=$(echo "$choice" | tail -n 1)

  if [ -z "$bookmark_path" ]; then
    echo "$query"
  else
    echo "$bookmark_path"
  fi
}

case ${1:-open} in
  list) 
    list
  ;;
  open)
    path=$(choose_bookmark " open bookmark:")
    echo "$path"

    if [ -f "$path" ]; then
      url=$(get_toml_field "url" < "$path")
      xdg-open "$url"
    fi
  ;;
  upsert)
    path=$(choose_bookmark "󱄀 edit or create bookmark:")
    echo "$path" 
    open_or_create "$path"
  ;;
  *) 
    fancy-log error \
      -v cmd "$1" \
      -v available_commands "list,open,upsert" \
      "Command not found"
    exit 1 
  ;;
esac
