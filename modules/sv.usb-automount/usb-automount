#!/usr/bin/sh

. "$(dirname "$0")/lib"

# Automatically mount and unmount USB devices to the specified user's home 
# directory, ~/Media/USB
#
# The script must be run as root.
#
# Usage: usb_automount -u <user>

while getopts ":hu:" opt; do 
  case $opt in
    h)
      echo "Usage: $(basename "$0") -u <user>"
      exit 0
    ;;
    u)
      USER="$OPTARG"
    ;;
    \?)
      echo "Error: Invalid option: -$OPTARG" >&2
      exit 1
    ;;
    :)
      echo "Error: Option -$OPTARG requires an value." >&2
      exit 1
    ;;
  esac
done

if [ -z "$USER" ]; then
  echo "Error: Missing required option: -u <user>" >&2
  exit 1
fi

if ! id -u "$USER" >/dev/null 2>&1; then
  echo "Error: User \"$USER\" does not exist." >&2
  exit 1
fi

# Create and set ownership of the USB mount root directory under the 
# specified user's home directory
USER_HOME=$(eval echo "~$USER")
MOUNT_ROOT_DIR="$USER_HOME/Media/USB"
mkdir -p "$MOUNT_ROOT_DIR"
chown "$USER" "$MOUNT_ROOT_DIR"

echo "--- BEGIN"
echo "Info: Mount point permissions for user \"$USER\""
echo "Info: Mount point root directory: $MOUNT_ROOT_DIR"

# Notify the user of a mount or unmount event
#
# Arguments:
# $1: Notification title
# $2: Notification message
notifyUser() {
  machineId=$(cat /etc/machine-id)

  # Load the user's X session environment variables
  if [ -f "$USER_HOME/.dbus/session-bus/$machineId-0" ]; then
    . "$USER_HOME/.dbus/session-bus/$machineId-0"
  fi

  sudo -u "$USER" \
    DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" \
    DISPLAY="${DISPLAY:-0}" \
    notify-send "$1" "$2"
}

# Main loop
previousPartitions=$(getAllUSBPartitions)

while true; do
  nextPartitions=$(getAllUSBPartitions)

  # Loop through the current state and check if a partition is missing
  # from the previous partition state, indicating that the partition has
  # been added.
  for partition in $nextPartitions; do
    if ! echo "$previousPartitions" | grep -q "$partition"; then
      echo "Info: New USB partition detected, $partition, mounting"

      notifyUser "USB device $partition detected" \
        "Mounting to $MOUNT_ROOT_DIR"

      mountPartition "$partition" "$USER"
    fi
  done

  # Loop through the previous state and check if a partition is missing
  # from the current partition state, indicating that the partition has
  # been removed.
  for partition in $previousPartitions; do
    if ! echo "$nextPartitions" | grep -q "$partition"; then
      echo "Info: USB partition disapared, $partition, unmounting"

      notifyUser "USB device $partition removed" \
        "Unmounting from $MOUNT_ROOT_DIR"
      
      unmountPath "$partition"
    fi
  done

  # Sleep for a short period to avoid high CPU usage
  sleep 0.5
  previousPartitions="$nextPartitions"
done
