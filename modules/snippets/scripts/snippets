#!/usr/bin/env sh

# -e: exit on error, -u: error on undefined variable
set -u

. "$CORE_FUNCTIONS/stdin-or"

# List all snippet files in the snippets directory.
list_all() {
  show_only_runnable=false

  while [ "$#" -gt 0 ]; do
    case $1 in
      -e|--only-executables)
        show_only_runnable=true
      ;;
      --) shift; break ;;
      -?*) echo "error: unknown option (ignored): $1" >&2; exit 1 ;;
      *) break ;;
    esac
    shift
  done

  if [ "$show_only_runnable" = true ]; then
    rg --files --sortr modified "$SNIPPETS_DATA" \
      | xargs -I {} sh -c 'test -x "{}" && echo {} || true' \
      | xargs -I {} basename "{}" \
      | sort
  else
    rg --files --sortr modified "$SNIPPETS_DATA" \
      | sed 's/^.*\///'
  fi
}

# Execute a snippet file if it has +x permissions, otherwise output it's
# contents.
run_or_copy() {
  path=$1
  if [ -x "$path" ]; then
    $1
  else
    sed '/```toml/,/```/d' < "$1"
  fi
}

# Runs a snippet file by name. 
#
# This allows you to run a snippet without having to specify the full path to 
# the snippet file or having the snippet folder in your PATH.
#
# Arguments:
# $1: Snippet signature
#
# Example:
# run "date iso"
run() {
  signature=$(stdin_or "$1")
  name=${signature%% *}
  params=${signature#* }
  path="$SNIPPETS_DATA/${name}"

  if [ ! -f "$path" ]; then
    echo "Snippet $name does not exist in $SNIPPETS_DATA" >&2
    exit 1
  fi

  if [ -x "$path" ]; then
    $path $params 
  else
    # Remove entire TOML metadata header
    sed '/```toml/,/```/d' < "$path"
  fi
}

# Open Nvim with the snippet file. If the snippet file does not exist, create
# it with a default TOML header.
#
# Arguments:
# $1: Snippet file path
open() {
  if [ ! -f "$1" ]; then
    {
      echo "\`\`\`toml" 
      echo "id=\"$(random uuid)\""
      echo "type=\"snippet\""
      echo "description=\"\""
      echo "tags=[]"
      echo "created_at=\"$(date --iso-8601=seconds)\""
      echo "\`\`\`"
      echo ""
    } > "$SNIPPETS_DATA/$1"
  fi

  # Set nvim's NerdTree file explorer to the snippets directory
  cd "$SNIPPETS_DATA" && nvim \
    -c "norm zz" \
    -c "set spell" \
    -c "set syntax=markdown" \
    "$1"
}

# Ask the user to select a snippet from a list of snippets. If no mached 
# snippet is found, the user's query is returned.
# Synopsis: choose_snippet <title>
choose() {
  title="$1"
  delimiter_count=$(echo "$SNIPPETS_DATA" \
    | grep --only-matching "/" \
    | wc --lines
  ) 
  choice=$(rg --files --glob '**/data/*' --sortr modified "$SNIPPETS_DATA" \
    | fzf \
      --preview 'bat --color=always --style=numbers --line-range :500 {}' \
      --preview-window=right:85:wrap \
      --header "$title" \
      --delimiter "/" \
      --with-nth=$(( delimiter_count + 2 )) \
      --print-query
    )

  query=$(echo "$choice" | head -n 1)
  path=$(echo "$choice" | tail -n 1)

  if [ -z "$path" ]; then
    echo "$query"
  else
    echo "$path"
  fi
}

# ╭──────────────────────
# │ Main 
# ╰────────

case ${1-copy} in
  list) 
    shift
    list_all "$@"
  ;;
  run)
    run "$2"
  ;;
  copy)
    path=$(choose " copy snippet:")

    if [ -n "$path" ] && [ -f "$path" ]; then
      # not using pipe (run "$snippet" | copy) since some snippets may output 
      # content without newline 
      yank "$(run_or_copy "$path")"
    fi
  ;;
  upsert)
    path=$(choose "󱩼 edit or create snippet:")

    if [ -n "$path" ]; then
      open "$path"
    fi
  ;;
  *) echo "error: command $1 not defined" >&2; exit 1 ;;
esac
