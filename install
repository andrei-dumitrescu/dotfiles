#!/bin/sh -eu

# absolute dir path of this script file
dirpath=$(dirname "$(realpath "$0")")

#
# Main folders
#

mkdir -p "$HOME/Downloads"
mkdir -p "$HOME/Pictures/Wallpapers"
mkdir -p "$HOME/Pictures/Screenshots"
mkdir -p "$HOME/Work"
mkdir -p "$HOME/Media"

#
# Restore configs
#

echo "#"
echo "# - Restore 'fontconfig' into '~/.config'"
echo "# - Copy font into '.local/share/fonts'"
echo "#"

cp -r "$dirpath/.config/mimeapps.list" "$HOME/.config"
cp -r "$dirpath/.config/alacritty" "$HOME/.config"
cp -r "$dirpath/home/.gitconfig" "$HOME/"
cp -r "$dirpath/home/.profile" "$HOME/"
cp -r "$dirpath/doomguy.png" "$HOME/"
cp -r "$dirpath/doomguy-blood.png" "$HOME/"
cp -r "$dirpath/wallpapers/*" "$HOME/Pictures/Wallpapers"

# setupPacman()
# Enable 'extra' and 'community' Arch repos, setup local repository for
# aur packages
setupPacman() {
  # Allow arch repos
  sudo pacman -S artix-archlinux-support

  if grep -q "^\[extra\]$" /etc/pacman.conf; then
    echo "[extra] already enabled"
  else
    {
      echo "[extra]"
      echo "Include = /etc/pacman.d/mirrorlist-arch" 
    } >> /etc/pacman.conf
  fi

  if grep -q "^\[community\]$" /etc/pacman.conf; then
    echo "[community] already enabled"
  else
    {
      echo "[community]"
      echo "Include = /etc/pacman.d/mirrorlist-arch"
    } >> /etc/pacman.conf
  fi

  {
    echo "[t440p]"
    echo "SigLevel = Optional TrustAll"
    echo "Server = file:///home/pacman-local-repo"
  } >> /etc/pacman.conf

  sudo pacman -Syu
  sudo pacman-key --populate archlinux
}

# setupFonts()
# Symlink user font related directories 
setupFonts() {
  mkdir -p "$HOME/.local/share/fonts"

  ln -s "$dirpath/.config/fontconfig" "$HOME/.config/fontconfig"
  ln -s "$dirpath/.local/share/fonts" "$HOME/.local/share/fonts"
}

# setupNvim()
# Symlink nvim configs, install Plug package manager
setupNvim() {
  ln -s "$dirpath/.config/nvim" "$HOME/.config/nvim"

  sh -c 'curl -fLo "$HOME/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
}

# setupDesktop()
# Symlink desktop visual configs
setupDesktop() {
  if [ "$XDG_CURRENT_DESKTOP" = "sway" ]; then
    ln -s "$dirpath/.config/sway" "$HOME/.config/sway"
  fi

  if [ "$XDG_CURRENT_DESKTOP" = "i3" ]; then
    ln -s "$dirpath/.config/i3" "$HOME/.config/i3"
  fi

  ln -s "$dirpath/.config/i3blocks" "$HOME/.config/i3blocks"
  ln -s "$dirpath/.config/dunst" "$HOME/.config/dunst"
  ln -s "$dirpath/.config/rofi" "$HOME/.config/rofi"

  sudo pacman --noconfirm -S \
    imagemagick \
    xorg-xlsclients \
    xorg-xwayland \
    grim \
    slurp
}

setupZSH() {
  # History folder
  mkdir -p "$HOME/.cache/zsh"

  #
  # Restore zsh configs
  #

  mkdir -p "$HOME/.config"
  cp -r "$dirpath/.config/zsh" "$HOME/.config"

  if [ -f "$HOME/.zshrc" ]; then
    mv "$HOME/.zshrc" "$HOME/.zshrc_backup"
  fi

  ln -s "$HOME/.config/zsh/.zshrc" "$HOME/.zshrc"

  #
  # Install zsh plugins
  #

  mkdir -p "$HOME/.local"
  cp -r "$dirpath/.local/scripts" "$HOME/.local"
  cp -r "$dirpath/.local/statusbar" "$HOME/.local"

  cd ~/.local/scripts && ./sys.zsh.update

  #
  # Install Node.js
  #

  nodeLTSVersion=$(nvm ls-remote \
    | grep "Latest LTS" \
    | tail -n 1 \
    | awk '{print $2}' \
    | tr '.' '\n' \
    | head -n 1
  )

  nvm install "$nodeLTSVersion" --reinstall-packages-from=current --latest-npm
  nvm alias default "$nodeLTSVersion"
}

sudo pacman --noconfirm -S \
  keychain \
  libsecret \
  the_silver_searcher \
  xdg-desktop-portal-wlr \
  bluez \
  bluez-utils \
  bluez-runit 

sudo ln -s /etc/runit/sv/bluetoothd /run/runit/service
sudo sv start bluetoothd
